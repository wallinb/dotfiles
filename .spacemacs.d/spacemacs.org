#+title: Spacemacs Configuration
#+description: Configuration org-file which gets tangled to generate user-config.el and user-init.el
#+startup: overview

* General
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  ;; Wrap line by default
  (global-visual-line-mode t)

  ;; Auto save directly to file and auto load changes
  (auto-save-visited-mode t)
  (global-auto-revert-mode t)

  ;; Familiar zooming with Ctrl+ and Ctrl-
  (define-key global-map (kbd "C-+") 'text-scale-increase)
  (define-key global-map (kbd "C--") 'text-scale-decrease)

  ;; This combination generally forces splitting into columns
  (setq split-width-threshold 1)
  (setq split-height-threshold nil)

  ;; Prevent paren madness
  (setq show-paren-mode t)
  (setq show-paren-style 'expression)

  ;; Always have final newline (posix standard)
  (setq require-final-newline t)
#+END_SRC
* Org
** 0 - General
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (with-eval-after-load 'org
    (setq org-directory (file-name-as-directory "~/Dropbox/org"))
    (setq inbox-file (concat org-directory "projects/inbox.org"))
    (setq org-agenda-files (list (concat org-directory "projects")))
    (setq org-agenda-file-regexp "\\`[^.].*\\.org\\'")

    ;; Autosave org files regularly
    (add-hook 'auto-save-hook 'org-save-all-org-buffers)

    ;; Not sure -- set 't' to change status in org-todo list?
    (setq org-use-fast-todo-selection t)

    ;; Setup todo states
    ;; letter means indicator/keystroke
    ;; left/right of slash @ means take note when entering/leaving
    ;; lef/right of slash ! means record timestamp when entering/leaving state
    (setq org-todo-keywords
          (quote ((sequence "TODO(t)" "NEXT(n)" "IN_PROGRESS(i!)" "WAITING(w@)" "HOLD(h@)" "|" "DONE(d!)" "CANCELLED(c@)")
                  (sequence "REPEAT(r)" "|" "DONE(d!)"))))
    (setq org-todo-keyword-faces
          '(("TODO" . "dodger blue") ("IN_PROGRESS" . "tomato") ("REPEAT" . "turquoise") ("WAITING" . "slate blue") ("CANCELED" . "dim gray") ("DONE" . "forest green")))

    ;; Dependency enforcement
    (setq org-enforce-todo-dependencies nil)
    (setq org-enforce-todo-checkbox-dependencies t)

    ;; When hitting alt-return on a header, please create a new one without
    ;; messing up the one I'm standing on.
    (setq org-insert-heading-respect-content t)

    ;; Do not insert blank lines ever
    (setq org-blank-before-new-entry '((heading . never) (plain-list-item . never)))

    ;; Keep the indentation well structured by. OMG this is a must have. Makes
    ;; it feel less like editing a big text file and more like a purpose built
    ;; editor for org mode that forces the indentation. (Might be default in spacemacs?)
    (setq org-startup-indented t)

    ;; Attachments are inherited
    (setq org-attach-use-inheritance t)

    ;; Log and clock into respective drawers
    (setq org-log-into-drawer t)

    ;; Log reschedules to drawer
    (setq org-log-reschedule nil)
    (setq org-log-done nil)

    ;; Don't instert blank before headings
    (setcdr (assoc 'heading org-blank-before-new-entry) nil)

    ;; Strike through done items
    (set-face-attribute 'org-headline-done nil :strike-through t)

    ;; Default priority is low
    (setq org-priority-lowest 68)
    (setq org-priority-highest 65)
    (setq org-priority-default 68)

    ;; Refile to any sub-heading
    (setq org-refile-targets '((nil :maxlevel . 9)
                               (org-agenda-files :maxlevel . 9)))
    ;; Refile in a single go
    (setq org-outline-path-complete-in-steps nil)
    ;; Show full paths for refiling
    (setq org-refile-use-outline-path t)

    ;; Fix for search not matching folded regions. See: https://github.com/emacs-evil/evil/issues/1630
    ;; (setq org-fold-core-style 'overlays)  <-- must be set before loading org
    (evil-select-search-module 'evil-search-module 'evil-search)

    (setq org-tag-alist (quote ((:startgroup)
                                ("@errand" . ?e)
                                ("@office" . ?o)
                                ("@home" . ?h)
                                (:endgroup)
                                ("WORK" . ?w)
                                ("PROJECT" . ?p)
                                ("NOTE" . ?n)))))
#+END_SRC
** Agenda
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (with-eval-after-load 'org
    ;; Overwrite the current window with the agenda
    (setq org-agenda-window-setup 'current-window)

    ;; Default to day view
    (setq org-agenda-span 'day)

    ;; Set agenda view formatting
    (setq org-agenda-breadcrumbs-separator "/")
    (setq org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s %b")
                                     (timeline . "  % s")
                                     (todo . " %i %-12:c %b")
                                     (tags . " %i %-12:c %b")
                                     (search . " %i %-12:c")))

    ;; Default to follow mode in agenda view
    (setq org-agenda-start-with-follow-mode nil)

    ;; Habit options
    (setq org-habit-graph-column 83)
    (setq org-habit-show-habits-only-for-today t)
    (setq org-habit-preceding-days 30)
    (setq org-habit-following-days 3)

    ;; Don't alter foreground for blocked items in agenda
    (set-face-foreground 'org-agenda-dimmed-todo-face nil)

    ;; Start week on Sunday
    (setq org-agenda-start-on-weekday 7)

    ;; Don't show done items in agenda
    (setq org-agenda-skip-scheduled-if-done t)

    ;; Super agenda
    (org-super-agenda-mode)
    (setq org-super-agenda-groups
          '( ;; Each group has an implicit boolean OR operator between its selectors.
            (:name "Today"          ; Optionally specify section name
                   :time-grid t     ; Items that appear on the time grid
                   :order 0)
            (:name "Top Priority" :priority>= "C" :order 1)
            (:name "Work" :category "work" :order 2)
            (:name "Habits" :habit t :order 10)
            (:auto-category t :order 2)
            ))
    ;; Fix for issue with key mapping interaction. See: https://github.com/alphapapa/org-super-agenda/issues/50
    (setq org-super-agenda-header-map (make-sparse-keymap))

    ;; Add a horizontal line to agenda view date
    (setq org-agenda-format-date (lambda (date) (concat "\n"
                                                        (make-string (window-width) 9472)
                                                        "\n"
                                                        (org-agenda-format-date-aligned date))))

    ;; Set repeat to state globally
    (setq org-todo-repeat-to-state "REPEAT")

    (setq org-stuck-projects
          '("+PROJECT/-DONE" ("NEXT" ) )))
#+END_SRC
** Capturing
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (with-eval-after-load 'org
    (defun transform-square-brackets-to-round-ones(string-to-transform)
      "Transforms [ into ( and ] into ), other chars left unchanged."
      (concat
        (mapcar #'(lambda (c) (if (equal c ?[) ?\( (if (equal c ?]) ?\) c))) string-to-transform)))

    (setq org-capture-templates '(("t" "Todo" entry (file inbox-file)
                                    "* TODO %^{Description}\n%?")
                                  ("n" "Note" entry (file inbox-file)
                                    "* %? :NOTE:\n" :clock-in t :clock-resume t)
                                  ("c" "Cookbook" entry (file+headline "~/Dropbox/org/projects/cooking.org" "Recipes")
                                    "%(org-chef-get-recipe-from-url)"
                                    :empty-lines 1)
                                  ("m" "Manual Cookbook" entry (file+headline (concat org-directory "projects/cooking.org") "Recipes")
                                    "* %^{Recipe title: }\n  :PROPERTIES:\n  :source-url:\n  :servings:\n  :prep-time:\n  :cook-time:\n  :ready-in:\n  :END:\n** Ingredients\n   %?\n** Directions\n\n")
                                  ("p" "Protocol" entry (file inbox-file)
                                    "* %^{Title}\nSource: [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\nCaptured On: %U\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
                                  ("L" "Protocol Link" entry (file inbox-file)
                                    "* %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]] \nCaptured On: %U"))))
#+END_SRC
** Clock
#+BEGIN_SRC emacs-lisp :tangle user-config.el
(with-eval-after-load 'org
  (require 'org-clock)
  (setq org-clock-into-drawer "CLOCKING")

  (setq org-clock-total-time-cell-format "%s")
  (setq org-duration-format 'h:mm)
  (setq org-clock-report-include-clocking-task t)
  (setq org-clock-out-remove-zero-time-clocks t)

  ;; Set state on clock-in/out
  (setq org-clock-in-switch-to-state "IN_PROGRESS")
  (setq org-clock-out-switch-to-state "TODO")
  (setq org-clock-out-when-done t)

  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)

  (setq bh/keep-clock-running nil)

  (defun bh/find-project-task ()
    "Move point to the parent (project) task if any"
    (save-restriction
      (widen)
      (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
        (while (org-up-heading-safe)
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (goto-char parent-task)
        parent-task)))

  (defun bh/punch-in (arg)
    "Start continuous clocking and set the default task to the
selected task.  If no task is selected set the Organization task
as the default task."
    (interactive "p")
    (setq bh/keep-clock-running t)
    (if (equal major-mode 'org-agenda-mode)
        ;;
        ;; We're in the agenda
        ;;
        (let* ((marker (org-get-at-bol 'org-hd-marker))
                (tags (org-with-point-at marker (org-get-tags-at))))
          (if (and (eq arg 4) tags)
              (org-agenda-clock-in '(16))
            (bh/clock-in-organization-task-as-default)))
      ;;
      ;; We are not in the agenda
      ;;
      (save-restriction
        (widen)
                                        ; Find the tags on the current task
        (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
            (org-clock-in '(16))
          (bh/clock-in-organization-task-as-default)))))

  (defun bh/punch-out ()
    (interactive)
    (setq bh/keep-clock-running nil)
    (when (org-clock-is-active)
      (org-clock-out))
    (org-agenda-remove-restriction-lock))

  (defun bh/clock-in-default-task ()
    (save-excursion
      (org-with-point-at org-clock-default-task
        (org-clock-in))))

  (defun bh/clock-in-parent-task ()
    "Move point to the parent (project) task if any and clock in"
    (let ((parent-task))
      (save-excursion
        (save-restriction
          (widen)
          (while (and (not parent-task) (org-up-heading-safe))
            (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
              (setq parent-task (point))))
          (if parent-task
              (org-with-point-at parent-task
                (org-clock-in))
            (when bh/keep-clock-running
              (bh/clock-in-default-task)))))))

  (defvar bh/organization-task-id "498085c5-4f62-4774-b09c-4d7ba8bb5d3a")

  (defun bh/clock-in-organization-task-as-default ()
    (interactive)
    (org-with-point-at (org-id-find bh/organization-task-id 'marker)
      (org-clock-in '(16))))

  (defun bh/clock-out-maybe ()
    (when (and bh/keep-clock-running
                (not org-clock-clocking-in)
                (marker-buffer org-clock-default-task)
                (not org-clock-resolving-clocks-due-to-idleness))
      (bh/clock-in-parent-task)))

  (add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)

  ; Set default column view headings: Task Effort Clock_Summary
  (setq org-columns-default-format "%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM")
  (setq org-global-properties (quote (("Effort_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")
                                  ("STYLE_ALL" . "habit")))))
#+END_SRC
** Habit
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (with-eval-after-load 'org
    (defvar ol/habit-report-defaultday 30
      "The default range of days from today, when no time is specified.")

    (defun ol/get-org-habit-string (&optional block starttime endtime)
      ;; check if starttime and endtime is specified
      (or starttime (setq starttime (format-time-string "%a %b %e %H:%M:%S %G" (time-subtract (current-time) (days-to-time ol/habit-report-defaultday)))))
      (or endtime (setq endtime (current-time-string)))

      ;; when block is specified set starttime and endtime
      (when block
        (progn
          (setq cc (org-clock-special-range block nil t)
                starttime (car cc)
                endtime (nth 1 cc))))

      ;; build the habit graph
      (list (org-habit-build-graph
             (org-habit-parse-todo)
             ;; time from
             (org-time-subtract (date-to-time starttime) (* 3600 org-extend-today-until))
             ;; today
             (date-to-time endtime)
             ;; time to
             (date-to-time endtime)) starttime endtime))

    (defun ol/habit-report (&optional params)
      (save-excursion
        (org-back-to-heading t)
        (print (ol/get-org-habit-string (plist-get params :block) (plist-get params :tstart) (plist-get params :tend)))
        (let* ((habit-data (ol/get-org-habit-string (plist-get params :block) (plist-get params :tstart) (plist-get params :tend)))
               (habit-str (car habit-data))
               (face-counts (list (cons 'org-habit-clear-future-face  0)
                                  (cons 'org-habit-ready-face  0)
                                  (cons 'org-habit-ready-future-face  0)
                                  (cons 'org-habit-alert-future-face  0)
                                  (cons 'org-habit-overdue-face  0)))
               (habit-stats (list (cons :org-heading  (org-get-heading t t t t))
                                  (cons :habit-done  0)
                                  (cons :habit-missed  0)
                                  (cons :habit-last-missed  nil)
                                  (cons :longest-day-streak  0)
                                  (cons :longest-done-streak  0)
                                  (cons :current-longest-done-streak  nil)
                                  (cons :starttime (car (cdr habit-data)))
                                  (cons :endtime (car (cdr(cdr habit-data))))))
               (cur-day-streak 0)
               (cur-done-streak 0))

          ;; iterate over string
          (dotimes (i (length habit-str))

            ;; sum up all faces
            (when (alist-get (get-text-property i 'face habit-str) face-counts)
              (setf (alist-get (get-text-property i 'face habit-str) face-counts) (+ (alist-get (get-text-property i 'face habit-str) face-counts) 1)))

            ;; if face is overdue of alert and has no complete-glyp
            (if (and (or (eq (get-text-property i 'face habit-str)
                             'org-habit-overdue-face)
                         (eq (get-text-property i 'face habit-str)
                             'org-habit-alert-future-face))
                     (not
                      (string= (string (aref habit-str i))
                               (string org-habit-completed-glyph))))

                (progn
                  (setf (alist-get :habit-last-missed habit-stats) (get-text-property i 'help-echo habit-str))
                  (when (> cur-day-streak (alist-get :longest-day-streak habit-stats))
                    (setf (alist-get :longest-day-streak habit-stats) cur-day-streak)
                    (setq cur-day-streak 0))
                  (when (> cur-done-streak (alist-get :longest-done-streak habit-stats))
                    (setf (alist-get :longest-done-streak habit-stats) cur-done-streak)
                    (setq cur-done-streak 0)))
              (progn
                (setf cur-day-streak (+ 1 cur-day-streak))
                (when (eq (get-text-property i 'face habit-str)
                          'org-habit-ready-face)
                  (setf cur-done-streak (+ 1 cur-done-streak))))
              )
            (if (string= (string (aref habit-str i))
                         (string org-habit-completed-glyph))
                (setf (alist-get :habit-done habit-stats) (+ 1 (alist-get :habit-done habit-stats))))
            ) ;; string iteration done

          ;; when last streak bigger then last streak
          (when (> cur-day-streak (alist-get :longest-day-streak habit-stats))
            (setf (alist-get :longest-day-streak habit-stats) cur-day-streak))
          (when (> cur-done-streak (alist-get :longest-done-streak habit-stats))
            (setf (alist-get :longest-done-streak habit-stats) cur-done-streak)
            (setf (alist-get :current-longest-done-streak habit-stats) t))

          ;; set missed habit count
          (setf (alist-get :habit-missed habit-stats) (alist-get 'org-habit-overdue-face face-counts))

          habit-stats)))

    (defun ol/habit-print-header (st et)
      (format "#+CAPTION: Habit report from %s to %s
    | Heading | Done Count | Missed Count | Last Missed | Longest Streak (days) | Longest Streak (done) | Currently longest |
    |-- |" st et))

    (defun ol/habit-stats-to-string (org-habits)
      (concat (ol/habit-print-header
               (format-time-string "%d-%m-%y" (date-to-time (alist-get :starttime (car org-habits))))
               (format-time-string "%d-%m-%y" (date-to-time (alist-get :endtime (car org-habits)))))
              (let ((result ""))(dolist (org-habit org-habits result)
                                  (setq result (concat result (format "\n|%s| %S | %s | %s | %s | %s | %s |"
                                                                      (alist-get :org-heading org-habit)
                                                                      (alist-get :habit-done org-habit)
                                                                      (alist-get :habit-missed org-habit)
                                                                      (alist-get :habit-last-missed org-habit)
                                                                      (alist-get :longest-day-streak org-habit)
                                                                      (alist-get :longest-done-streak org-habit)
                                                                      (alist-get :current-longest-done-streak org-habit))))))))

    (defun org-dblock-write:ol/habit-report (params)
      (if (plist-get params :scope)
          (setq ol/scope (plist-get params :scope))
        (setq ol/scope 'tree))
      (insert (ol/habit-stats-to-string
               (org-map-entries (lambda () (ol/habit-report params)) "STYLE=\"habit\"" ol/scope)))
      (org-table-align))
  )
#+END_SRC
** Keybinds
#+BEGIN_SRC emacs-lisp :tangle user-config.el
(with-eval-after-load 'org
  (spacemacs/set-leader-keys-for-major-mode 'org-mode "or" 'org-roam-refile)
  (spacemacs/set-leader-keys-for-major-mode 'org-mode "os" 'bh/punch-in)
  (spacemacs/set-leader-keys-for-major-mode 'org-mode "ox" 'bh/punch-out)
  (spacemacs/set-leader-keys-for-major-mode 'org-mode "ov" 'org-columns))
#+END_SRC
** Other/package
*** org-babel
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (with-eval-after-load 'org
    (setq org-babel-load-languages
          '((python . t)
            (clojure . t)
            (js . t)
            (emacs-lisp . t)
            (plantuml . t)
            (scheme . t)
            (shell . t)
            (dot . t))))
#+END_SRC

*** org-edna
#+BEGIN_SRC emacs-lisp :tangle user-config.el
(with-eval-after-load 'org
  (org-edna-mode))
#+END_SRC

*** org-protocol
#+BEGIN_SRC emacs-lisp :tangle user-config.el
(with-eval-after-load 'org
  (require 'org-protocol)
  (add-to-list 'org-modules 'org-protocol))
#+END_SRC

*** org-roam
#+BEGIN_SRC emacs-lisp :tangle user-init.el
(setq org-roam-v2-ack t)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (with-eval-after-load 'org
    (setq org-roam-completion-everywhere t)
    (setq org-roam-directory (concat org-directory "notes"))
    (setq org-roam-db-location (concat org-directory "db/org-roam.db")))
#+END_SRC
*** org-journal
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (with-eval-after-load 'org
    (setq org-journal-date-format "%A %Y-%m-%d")
    (setq org-journal-dir (concat org-directory "journal"))
    (setq org-journal-file-format "%Y-%m")
    (setq org-journal-file-header "#+TITLE: Monthly Journal\n#+STARTUP: folded\n")
    (setq org-journal-file-type 'monthly))
#+END_SRC
* Programming
** Clojure
#+BEGIN_SRC emacs-lisp :tangle user-config.el
(require 'ob-clojure)
(setq org-babel-clojure-backend 'cider)
(setq clojure-align-forms-automatically nil)
(setq clojure-indent-style 'align-arguments)
#+END_SRC
** General
#+BEGIN_SRC emacs-lisp :tangle user-config.el
(setq coffee-tab-width 2) ; coffeescript
(setq css-indent-offset 2) ; css-mode
(setq javascript-indent-level 2) ; javascript-mode
(setq js-indent-level 2) ; js-mode
(setq js2-basic-offset 2) ; js2-mode, in latest js2-mode, it's alias of js-indent-level
(setq sh-basic-offset 2)
(setq web-mode-markup-indent-offset 2) ; web-mode, html tag in html file
(setq web-mode-css-indent-offset 2) ; web-mode, css in html file
(setq web-mode-code-indent-offset 2) ; web-mode, js code in html file
#+END_SRC
** LSP
#+BEGIN_SRC emacs-lisp :tangle user-config.el
#+END_SRC
** Python
#+BEGIN_SRC emacs-lisp :tangle user-config.el
(setenv "WORKON_HOME" "~/.pyenv/versions/miniconda3-latest/envs")
(pyvenv-mode 1)
(setq blacken-line-length 132)
#+END_SRC
** Shell
#+BEGIN_SRC emacs-lisp :tangle user-config.el
#+END_SRC
* Chinese
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  ;; (require 'pyim-basedict)
  ;; (pyim-basedict-enable)
#+END_SRC
* SSH
This was necessary for e.g. magit when run in GUI mode -- sometimes?
#+BEGIN_SRC emacs-lisp :tangle user-config.el
;; (require 'exec-path-from-shell)
;; (exec-path-from-shell-copy-env "SSH_AGENT_PID")
;; (exec-path-from-shell-copy-env "SSH_AUTH_SOCK")
#+END_SRC
* Misc
Avoid odd interaction with evil mode and incomplete searches. See: https://emacs.stackexchange.com/questions/35946/strange-behaviour-on-evil-delete/48282#48282
#+BEGIN_SRC emacs-lisp :tangle user-config.el
(defun stop-using-minibuffer ()
    "kill the minibuffer"
    (when (and (>= (recursion-depth) 1) (active-minibuffer-window))
      (abort-recursive-edit)))

(add-hook 'mouse-leave-buffer-hook 'stop-using-minibuffer)
#+END_SRC
** ChatGPT
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  ;; (setq gptel-api-key
  ;;       (plist-get (car (auth-source-search :host "openai.com"))
  ;;                  :secret))
#+END_SRC
