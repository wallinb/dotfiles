#+title: Emacs Configuration
#+description: Configuration org-file which gets tangled to generate user-config.el
#+startup: overview

* General
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  ;; wrap line by default
  (global-visual-line-mode 1)

  ;; Familiar zooming with Ctrl+ and Ctrl-
  (define-key global-map (kbd "C-+") 'text-scale-increase)
  (define-key global-map (kbd "C--") 'text-scale-decrease)

  ;; This combination makes splitting horizontally more likely...don't ask me how
  (setq split-width-threshold 1)
  (setq split-height-threshold nil)

  ;; Prevent paren madness
  (setq show-paren-mode t)
  (setq show-paren-style 'expression)
#+END_SRC


* Org
** Locations
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (with-eval-after-load 'org
    ;; Set dir/file defaults
    (setq org-directory "~/Dropbox/org")
    (setq org-default-notes-file (concat org-directory "/inbox.org"))
    (setq-default dotspacemacs-configuration-layers
                  '((org :variables org-projectile-file "TODOs.org")))

    ;; Collect all .org from my Org directory and subdirs
    (setq org-agenda-file-regexp "\\`[^.].*\\.org\\'") ; default value
    (defun load-org-agenda-files-recursively (dir) "Find all directories in DIR."
           (unless (file-directory-p dir) (error "Not a directory `%s'" dir))
           (unless (equal (directory-files dir nil org-agenda-file-regexp t) nil)
             (add-to-list 'org-agenda-files dir)
             )
           (dolist (file (directory-files dir nil nil t))
             (unless (member file '("." ".."))
               (let ((file (concat dir file "/")))
                 (when (file-directory-p file)
                   (load-org-agenda-files-recursively file)
                   )
                 )
               )
             )
           )
    (load-org-agenda-files-recursively org-directory) ; trailing slash required

    ;; Enable org-refile accross files
    (setq org-refile-targets
          '((nil :maxlevel . 3)
            (org-agenda-files :maxlevel . 1))))
#+END_SRC

** General
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (with-eval-after-load 'org
    ;; Autosave regularly
    (add-hook 'auto-save-hook 'org-save-all-org-buffers)

    ;; Not sure -- set 't' to change status in org-todo list?
    (setq org-use-fast-todo-selection t)

    ;; Setup todo states
    ;; letter means indicator/keystroke
    ;; left/right of slash @ means take note when entering/leaving
    ;; lef/right of slash ! means record timestamp when entering/leaving state
    (setq org-todo-keywords
          (quote ((sequence "TODO(t)" "NEXT(n)" "IN_PROGRESS(i!)" "WAITING(w@)" "HOLD(h@)" "|" "DONE(d!)" "CANCELLED(c@)")
                  (sequence "REPEAT(r)" "|" "DONE(d!)"))))
    (setq org-todo-keyword-faces
          '(("TODO" . "dodger blue") ("IN_PROGRESS" . "tomato") ("REPEAT" . "turquoise") ("WAITING" . "slate blue") ("CANCELED" . "dim gray") ("DONE" . "forest green")))

    ;; Turn off dependency enforcement (seems to cause crashes frequently)
    (setq org-enforce-todo-dependencies nil)
    (setq org-enforce-todo-checkbox-dependencies nil)

    ;; When hitting alt-return on a header, please create a new one without
    ;; messing up the one I'm standing on.
    (setq org-insert-heading-respect-content t)

    ;; Keep the indentation well structured by. OMG this is a must have. Makes
    ;; it feel less like editing a big text file and more like a purpose built
    ;; editor for org mode that forces the indentation. (Might be default in spacemacs?)
    (setq org-startup-indented t)

    ;; Attachments are inherited
    (setq org-attach-use-inheritance t)

    ;; Log and clock into respectie drawers
    (setq org-log-into-drawer t)

    ;; Log reschedules to drawer
    (setq org-log-reschedule (quote time))
    (setq org-log-done nil))
#+END_SRC

** Agenda
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (with-eval-after-load 'org
    ;; Set agenda view formatting
    (setq org-agenda-breadcrumbs-separator "/")
    (setq org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s %b")
                                     (timeline . "  % s")
                                     (todo . " %i %-12:c %b")
                                     (tags . " %i %-12:c %b")
                                     (search . " %i %-12:c")))

    ;; Default to follow mode in agenda view
    (setq org-agenda-start-with-follow-mode t)

    ;; Habit options
    (setq org-habit-graph-column 83)
    (setq org-habit-show-habits-only-for-today t)
    (setq org-habit-preceding-days 30)
    (setq org-habit-following-days 3)

    ;; Don't alter foreground for blocked items in agenda
    (set-face-foreground 'org-agenda-dimmed-todo-face nil)

    ;; Start week on Sunday
    (setq org-agenda-start-on-weekday 7)

    ;; Super agenda
    (org-super-agenda-mode)
    (setq org-super-agenda-groups
          '( ;; Each group has an implicit boolean OR operator between its selectors.
            (:name "Today"          ; Optionally specify section name
                   :time-grid t     ; Items that appear on the time grid
                   :order 0)
            (:name "Work" :category "work" :order 1)
            (:name "Habits" :habit t :order 10)
            (:auto-category t :order 2)
            )))
#+END_SRC


** Clock
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (with-eval-after-load 'org
    (require 'org-clock)
    (setq org-clock-into-drawer "CLOCKING")

    (setq org-clock-total-time-cell-format "%s")
    (setq org-duration-format 'h:mm)
    (setq org-clock-report-include-clocking-task t)

    ;; Set state on clock-in/out
    (setq org-clock-in-switch-to-state "IN_PROGRESS")
    (setq org-clock-out-switch-to-state "TODO")
    (setq org-clock-out-when-done t)

    ;; Seems not to work right...
    ;; (setq org-clock-persist t)
    ;; (org-clock-persistence-insinuate)
    )
#+END_SRC

** Calender
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (with-eval-after-load 'org
    (setq org-gcal-client-id "322490078171-du9iqgmrrjdq1l5ca1fhodv2i9o02std.apps.googleusercontent.com" ;// no-commit
          org-gcal-client-secret "yYx2zRLDBS8pqqRgrNukn5Ex") ;// no-commit
    (setq org-gcal-file-alist '(("broose33@gmail.com" . "~/Dropbox/org/gcal.org")))
    (setq calendar-week-start-day 1)
    (add-hook 'org-capture-after-finalize-hook 'google-calendar/sync-cal-after-capture)
    (setq cfw:org-capture-template '("s" "Scedule an event" entry
                                     (file "~/Dropbox/org/gcal.org")
                                     "* %^{Description}\n%^{LOCATION}p\n%(cfw:org-capture-day)\n%?")))
#+END_SRC

** Capturing
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (with-eval-after-load 'org
    (defun transform-square-brackets-to-round-ones(string-to-transform)
      "Transforms [ into ( and ] into ), other chars left unchanged."
      (concat
       (mapcar #'(lambda (c) (if (equal c ?[) ?\( (if (equal c ?]) ?\) c))) string-to-transform))
      )

    (setq org-capture-templates '(
                                  ("b" "Add book to read" entry (file+headline "~/Dropbox/org/books.org" "Books to read")
                                   (file "~/Dropbox/org/templates/tpl-book.txt") :empty-lines-after 2)
                                  ("t" "Todo entry" entry (file "~/Dropbox/org/inbox.org")
                                   (file "~/Dropbox/org/templates/tpl-todo.txt"))
                                  ("g" "Goal entry" entry (file "~/Dropbox/org/goals.org")
                                   (file "~/Dropbox/org/templates/tpl-goal.txt"))
                                  ("p" "Protocol" entry (file "~/Dropbox/org/inbox.org")
                                   "* %^{Title}\nSource: [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\nCaptured On: %U\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
                                  ("L" "Protocol Link" entry (file "~/Dropbox/org/inbox.org")
                                   "* %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]] \nCaptured On: %U"))))
#+END_SRC

** Other/package
*** org-babel
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (with-eval-after-load 'org
    (setq org-babel-load-languages
          '((python . t)
            (js . t)
            (emacs-lisp . t)
            (shell . t)
            (dot . t)
            (jupyter . t))))
#+END_SRC

*** org-roam
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (with-eval-after-load 'org
    (setq org-roam-directory "~/Dropbox/org/zettelkasten")
    (setq org-roam-db-location "~/Dropbox/org/zettelkasten/db/org-roam.db")
    (add-hook 'org-mode-hook 'org-roam-mode))
#+END_SRC

*** org-edna
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (with-eval-after-load 'org
    (org-edna-mode))
#+END_SRC

*** org-protocol
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (with-eval-after-load 'org
    (require 'org-protocol)
    (add-to-list 'org-modules 'org-protocol))
#+END_SRC


* Programming
** General
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq coffee-tab-width 2) ; coffeescript
  (setq javascript-indent-level 2) ; javascript-mode
  (setq js-indent-level 2) ; js-mode
  (setq js2-basic-offset 2) ; js2-mode, in latest js2-mode, it's alias of js-indent-level
  (setq web-mode-markup-indent-offset 2) ; web-mode, html tag in html file
  (setq web-mode-css-indent-offset 2) ; web-mode, css in html file
  (setq web-mode-code-indent-offset 2) ; web-mode, js code in html file
  (setq css-indent-offset 2) ; css-mode
#+END_SRC
** Python
#+BEGIN_SRC emacs-lisp :tangle user-config.el
(setenv "WORKON_HOME" "~/.pyenv/versions/miniconda3-latest/envs")
(pyvenv-mode 1)
#+END_SRC
* Chinese
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (require 'pyim-basedict)
  (pyim-basedict-enable)
#+END_SRC

* SSH
#+BEGIN_SRC emacs-lisp :tangle user-config.el
(require 'exec-path-from-shell)
(exec-path-from-shell-copy-env "SSH_AGENT_PID")
(exec-path-from-shell-copy-env "SSH_AUTH_SOCK")
#+END_SRC

* Misc
Avoid odd interaction with evil mode and incomplete searches. See: https://emacs.stackexchange.com/questions/35946/strange-behaviour-on-evil-delete/48282#48282
#+BEGIN_SRC emacs-lisp :tangle user-config.el
(defun stop-using-minibuffer ()
    "kill the minibuffer"
    (when (and (>= (recursion-depth) 1) (active-minibuffer-window))
      (abort-recursive-edit)))

(add-hook 'mouse-leave-buffer-hook 'stop-using-minibuffer)
#+END_SRC
